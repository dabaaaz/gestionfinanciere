angular.module("starter", [ "ionic", "starter.controllers", "starter.services", "starter.directives", "starter.calculs" ]).config(function($stateProvider, $urlRouterProvider) {
    $stateProvider.state("tab", {
        url: "/tab",
        "abstract": true,
        templateUrl: "templates/tabs.html",
        controller: "HideCtrl"
    }).state("tab.dash", {
        url: "/dash",
        views: {
            "tab-dash": {
                templateUrl: "templates/tab-dash.html",
                controller: "DashCtrl"
            }
        }
    }).state("tab.factures", {
        url: "/factures",
        views: {
            "tab-factures": {
                templateUrl: "templates/tab-factures.html",
                controller: "FacturesCtrl"
            }
        }
    }).state("tab.factures-ca", {
        url: "/factures-ca",
        views: {
            "tab-factures": {
                templateUrl: "templates/tab-factures-ca.html",
                controller: "FacturesCtrl"
            }
        }
    }).state("tab.factures-tva", {
        url: "/factures-tva",
        views: {
            "tab-factures": {
                templateUrl: "templates/tab-factures-tva.html",
                controller: "FacturesCtrl"
            }
        }
    }).state("tab.factures-charges", {
        url: "/factures-charges",
        views: {
            "tab-factures": {
                templateUrl: "templates/tab-factures-charges.html",
                controller: "FacturesCtrl"
            }
        }
    }).state("tab.facture-detail", {
        url: "/facture/:factureId",
        views: {
            "tab-factures": {
                templateUrl: "templates/facture-detail.html",
                controller: "FactureDetailCtrl"
            }
        }
    }).state("tab.facture-edit", {
        url: "/facture-edit/:factureId",
        views: {
            "tab-factures": {
                templateUrl: "templates/facture-edit.html",
                controller: "FactureEditCtrl"
            }
        }
    }).state("tab.facture-creer", {
        url: "/facture-creer",
        views: {
            "tab-factures": {
                templateUrl: "templates/tab-factures-creer.html",
                controller: "FactureCreerCtrl"
            }
        }
    });
    $urlRouterProvider.otherwise("/tab/dash");
});

angular.module("starter.controllers", []).controller("DashCtrl", function($scope, $timeout, $state, $ionicSideMenuDelegate, Factures, Preferences, Settings, Calcul, $ionicPopup, $ionicLoading) {
    $scope.toggleLeft = function() {
        $ionicSideMenuDelegate.toggleLeft();
    };
    $scope.goto = function(stateName) {
        $state.go(stateName);
    };
    var createFacture = function(name, totalFacture, tva, charges, payee, date) {
        var newFacture = Factures.newFacture($scope.factures.length, name, totalFacture, tva, charges, payee, date);
        $scope.factures.push(newFacture);
        Factures.save($scope.factures);
        $scope.selectFacture(newFacture, $scope.factures.length - 1);
        if (!settings.modalAddFacture) {
            $scope.modalAddFacture = {
                checked: false
            };
            $scope.modalAddFactureChange = function() {
                Settings.updateSettings($scope.modalAddFacture.checked, settings.homeTuto);
            };
            var alertPopup = $ionicPopup.alert({
                title: "Facture ajoutée",
                scope: $scope,
                subTitle: "Celle-ci apparaîtra dans la liste de vos factures",
                template: '<ion-checkbox ng-model="modalAddFacture.checked" ng-change="modalAddFactureChange()">Ne plus afficher</ion-checkbox>'
            });
            alertPopup.then(function(res) {
                location.reload();
            });
        } else {
            location.reload();
        }
    };
    $scope.factures = allFactures = Factures.all();
    $scope.preferences = Preferences.all();
    var settings = Settings.all();
    $scope.chiffresThatYear = Calcul.chiffresAnneeEnCours(allFactures);
    $scope.activeFacture = $scope.factures[Factures.getLastActiveIndex()];
    $scope.updateTvaAndCharges = function() {
        var tva = $scope.preferences.tva;
        var charges = $scope.preferences.charges;
        document.getElementById("tva").value = tva;
        document.getElementById("charges").value = charges;
        Preferences.updateTvaAndCharges(tva, charges);
        $ionicLoading.show({
            content: "Enregistré",
            animation: "fade-in",
            showBackdrop: true,
            maxWidth: 200,
            showDelay: 1e3
        });
        $timeout(function() {
            $ionicLoading.hide();
        }, 2e3);
    };
    $scope.newFacture = function(facture) {
        var payee = false, total = 0;
        if (facture.validation) payee = facture.validation;
        if (facture.ttc) {
            total = facture.totalFacture;
        } else {
            total = Calcul.toTtc(facture.totalFacture, facture.tva);
        }
        createFacture(facture.name, total, facture.tva, facture.charges, payee, facture.date);
    };
    $scope.selectFacture = function(facture, index) {
        $scope.activeFacture = facture;
        Factures.setLastActiveIndex(index);
    };
    $timeout(function() {
        if ($scope.factures.length === 0) {
            var alertPopup = $ionicPopup.alert({
                title: "Ajouter une facture",
                template: "Un petit slide sur la droite vous permettra d'ajouter une facture"
            });
        }
    });
}).controller("FacturesCtrl", function($scope, Factures, Calcul, $state) {
    var allFactures = Factures.all();
    for (var index in allFactures) {
        var facture = allFactures[index];
        facture.ht = Calcul.toHt(parseInt(facture.totalFacture), parseInt(facture.tva));
        facture.ttc = parseInt(facture.totalFacture);
        facture.tva = Calcul.toTva(facture.totalFacture, facture.tva);
        facture.charges = Calcul.toCharges(facture.ht, facture.charges);
    }
    $scope.factures = allFactures;
    $scope.goto = function(stateName) {
        $state.go(stateName);
    };
    $scope.data = {
        showDelete: false
    };
    $scope.edit = function(facture) {
        $state.go("tab.facture-edit", {
            factureId: facture.id
        });
    };
    $scope.valid = function(factureId, facturePayee) {
        var today = new Date();
        var dd = today.getDate();
        var mm = today.getMonth() + 1;
        var yyyy = today.getFullYear();
        if (dd < 10) {
            dd = "0" + dd;
        }
        if (mm < 10) {
            mm = "0" + mm;
        }
        today = yyyy + "-" + mm + "-" + dd;
        facture.payee = facturePayee;
        Factures.editPayee(factureId, facturePayee, today);
    };
    $scope.onItemDelete = function(facture) {
        $scope.factures.splice($scope.factures.indexOf(facture), 1);
        Factures.removeIndex(facture.id);
    };
}).controller("FactureDetailCtrl", function($scope, $stateParams, Factures, Calcul, $ionicNavBarDelegate) {
    var facture = Factures.get($stateParams.factureId);
    facture.ht = Calcul.toHt(parseInt(facture.totalFacture), parseInt(facture.tva));
    facture.tva = Calcul.toTva(facture.totalFacture, facture.tva);
    facture.charges = Calcul.toCharges(facture.ht, facture.charges);
    $scope.facture = facture;
    $scope.goBack = function() {
        $ionicNavBarDelegate.back();
    };
    $scope.valid = function(factureId, facturePayee) {
        var today = new Date();
        var dd = today.getDate();
        var mm = today.getMonth() + 1;
        var yyyy = today.getFullYear();
        if (dd < 10) {
            dd = "0" + dd;
        }
        if (mm < 10) {
            mm = "0" + mm;
        }
        today = yyyy + "-" + mm + "-" + dd;
        $scope.facture.date = newDate = today;
        Factures.editPayee(factureId, facturePayee, newDate);
    };
}).controller("FactureEditCtrl", function($scope, $stateParams, Factures, Calcul, $ionicNavBarDelegate) {
    var facture = Factures.get($stateParams.factureId);
    facture.ht = Calcul.toHt(parseInt(facture.totalFacture), parseInt(facture.tva));
    $scope.facture = facture;
    $scope.goBack = function() {
        $ionicNavBarDelegate.back();
    };
    $scope.editFacture = function(newFacture) {
        Factures.editIndex(newFacture);
        $ionicNavBarDelegate.back();
    };
    $scope.updatettc = function() {
        document.getElementById("totalttc").value = Calcul.toTtc($scope.facture.ht, $scope.facture.tva);
    };
    $scope.updateht = function() {
        document.getElementById("totalht").value = Calcul.toHt($scope.facture.totalFacture, $scope.facture.tva);
    };
}).controller("FactureCreerCtrl", function($scope, $ionicNavBarDelegate, Factures, Preferences, Calcul) {
    $scope.preferences = Preferences.all();
    $scope.factures = Factures.all();
    $scope.goBack = function() {
        $ionicNavBarDelegate.back();
    };
    $scope.createFacture = function(facture) {
        var payee = false, total = 0;
        if (facture.validation) payee = facture.validation;
        if (facture.ttc) {
            total = facture.totalFacture;
        } else {
            total = Calcul.toTtc(facture.totalFacture, facture.tva);
        }
        var newFacture = Factures.newFacture($scope.factures.length, facture.name, total, facture.tva, facture.charges, payee, facture.date);
        $scope.factures.push(newFacture);
        Factures.save($scope.factures);
        $ionicNavBarDelegate.back();
    };
}).controller("HideCtrl", function($scope) {
    var tabs = document.querySelectorAll("div.tabs")[0];
    tabs = angular.element(tabs);
    tabs.css("display", "none");
    $scope.$on("$destroy", function() {
        tabs.css("display", "");
    });
});

angular.module("starter.services", []).factory("Factures", function() {
    return {
        all: function() {
            var factureString = window.localStorage.factures;
            if (factureString) {
                console.log(angular.fromJson(factureString));
                return angular.fromJson(factureString);
            }
            return [];
        },
        save: function(factures) {
            window.localStorage.factures = angular.toJson(factures);
        },
        newFacture: function(id, name, totalFacture, tva, charges, payee, date) {
            var i = 0;
            while (this.get(id + i)) {
                i++;
            }
            var newId = id + i;
            return {
                id: newId,
                name: name,
                totalFacture: totalFacture,
                tva: tva,
                charges: charges,
                payee: payee,
                date: date
            };
        },
        get: function(factureId) {
            var factures = this.all();
            for (var key in factures) {
                var facture = factures[key];
                if (facture.id == factureId) {
                    return facture;
                }
            }
        },
        getLastActiveIndex: function() {
            return parseInt(window.localStorage.lastActiveFactures) || 0;
        },
        setLastActiveIndex: function(index) {
            window.localStorage.lastActiveFactures = index;
        },
        editIndex: function(newFacture) {
            var factures = this.all();
            for (var key in factures) {
                var facture = factures[key];
                if (facture.id == newFacture.id) {
                    console.log(facture.id, facture, newFacture.id, newFacture);
                    factures[key] = newFacture;
                }
            }
            this.save(factures);
        },
        editPayee: function(factureId, facturePayee, newDate) {
            var factures = this.all();
            var thisFacture = this.get(factureId);
            thisFacture.payee = facturePayee;
            thisFacture.date = newDate;
            this.editIndex(thisFacture);
        },
        removeIndex: function(index) {
            var factures = this.all();
            for (var key in factures) {
                var facture = factures[key];
                if (facture.id == index) {
                    factures.splice(key, 1);
                    break;
                }
            }
            this.save(factures);
        },
        clearAll: function() {
            window.localStorage.clear();
        }
    };
}).factory("Preferences", function() {
    return {
        all: function() {
            var preferencesString = window.localStorage.preferences;
            if (!preferencesString) {
                return this.save({
                    tva: 20,
                    charges: 30
                });
            } else {
                console.log(angular.fromJson(preferencesString));
                return angular.fromJson(preferencesString);
            }
        },
        save: function(preferences) {
            window.localStorage.preferences = angular.toJson(preferences);
        },
        updateTvaAndCharges: function(tva, charges) {
            this.save({
                tva: tva,
                charges: charges
            });
            var preferencesString = window.localStorage.preferences;
            console.log(angular.fromJson(preferencesString));
        }
    };
}).factory("Settings", function() {
    return {
        all: function() {
            var settingsString = window.localStorage.settings;
            if (!settingsString) {
                return this.save({
                    modalAddFacture: 0,
                    homeTuto: 0
                });
            } else {
                console.log(angular.fromJson(settingsString));
                return angular.fromJson(settingsString);
            }
        },
        save: function(settings) {
            window.localStorage.settings = angular.toJson(settings);
        },
        updateSettings: function(modalAddFacture, homeTuto) {
            this.save({
                modalAddFacture: modalAddFacture,
                homeTuto: homeTuto
            });
            var settingsString = window.localStorage.settings;
            console.log(angular.fromJson(settingsString));
        }
    };
});

angular.module("starter.directives", []).directive("fadeBar", function($timeout) {
    return {
        restrict: "E",
        template: '<div class="fade-bar"></div>',
        replace: true,
        link: function($scope, $element, $attr) {
            $timeout(function() {
                $scope.$watch("sideMenuController.getOpenRatio()", function(ratio) {
                    $element[0].style.opacity = Math.abs(ratio);
                });
            });
        }
    };
}).directive("onValidSubmit", [ "$parse", "$timeout", function($parse, $timeout) {
    return {
        require: "^form",
        restrict: "A",
        link: function(scope, element, attrs, form) {
            form.$submitted = false;
            var fn = $parse(attrs.onValidSubmit);
            element.on("submit", function(event) {
                scope.$apply(function() {
                    element.addClass("ng-submitted");
                    form.$submitted = true;
                    if (form.$valid) {
                        if (typeof fn === "function") {
                            fn(scope, {
                                $event: event
                            });
                        }
                    }
                });
            });
        }
    };
} ]).directive("validated", [ "$parse", function($parse) {
    return {
        require: "^form",
        restrict: "AEC",
        link: function(scope, element, attrs, form) {
            var inputs = element.find("*");
            var processInput = function(input) {
                var attributes = input.attributes;
                if (attributes.getNamedItem("ng-model") != void 0 && attributes.getNamedItem("name") != void 0) {
                    var field = form[attributes.name.value];
                    if (field != void 0) {
                        scope.$watch(function() {
                            return form.$submitted + "_" + field.$valid;
                        }, function() {
                            if (form.$submitted !== true) return;
                            var inp = angular.element(input);
                            if (inp.hasClass("ng-invalid")) {
                                element.removeClass("has-success");
                                element.addClass("has-error");
                            } else {
                                element.removeClass("has-error").addClass("has-success");
                            }
                        });
                    }
                }
            };
            for (var i = 0, max = inputs.length; i < max; i++) {
                processInput(inputs[i]);
            }
        }
    };
} ]).directive("initFromForm", function($parse) {
    return {
        link: function(scope, element, attrs) {
            var attr = attrs.initFromForm || attrs.ngModel || element.attrs("name"), val = attrs.value;
            $parse(attr).assign(scope, val);
        }
    };
}).directive("contenteditable", [ "$sce", function($sce) {
    return {
        restrict: "A",
        require: "?ngModel",
        link: function(scope, element, attrs, ngModel) {
            if (!ngModel) return;
            ngModel.$render = function() {
                element.html($sce.getTrustedHtml(ngModel.$viewValue || ""));
            };
            element.on("blur keyup change", function() {
                scope.$apply(read);
            });
            read();
            function read() {
                var html = element.html();
                if (attrs.stripBr && html == "<br>") {
                    html = "";
                }
                ngModel.$setViewValue(html);
            }
        }
    };
} ]);

angular.module("starter.calculs", []).factory("Calcul", function() {
    return {
        chiffresAnneeEnCours: function(allFactures) {
            var today = new Date();
            var mm = today.getMonth() + 1;
            var yyyy = today.getFullYear();
            var charges = 0, tva = 0, ca = 0, net = 0, tabAverageBenefParMois = [], averageNet = 0;
            for (var key in allFactures) {
                var facture = allFactures[key];
                var yearFacture = new Date(facture.date).getFullYear();
                var monthFacture = new Date(facture.date).getMonth() + 1;
                if (monthFacture < 10) {
                    monthFacture = "0" + monthFacture;
                }
                if (yearFacture == yyyy) {
                    var tvaCourante = 0, chargesCourantes = 0, netCourant = 0;
                    tvaCourante = parseInt(this.toTva(facture.totalFacture, facture.tva));
                    tva = tva + tvaCourante;
                    ca = ca + parseInt(facture.totalFacture) - tvaCourante;
                    chargesCourantes = this.toCharges(facture.totalFacture - tvaCourante, facture.charges);
                    charges = charges + chargesCourantes;
                    netCourant = facture.totalFacture - tvaCourante - chargesCourantes;
                    net = net + netCourant;
                }
            }
            averageNet = net / mm;
            return {
                charges: charges,
                tva: tva,
                ca: ca,
                average: averageNet
            };
        },
        toTtc: function(ht, tva) {
            var newValTtc = parseInt(ht) + parseInt(ht) * parseInt(tva) / 100;
            return parseInt(newValTtc.toFixed(2));
        },
        toHt: function(ttc, tva) {
            var newValHt = parseInt(ttc) * 100 / (parseInt(tva) + 100);
            return parseInt(newValHt.toFixed(2));
        },
        toTva: function(ttc, tva) {
            return parseInt(ttc - ttc / (1 + tva / 100)).toFixed(2);
        },
        toCharges: function(ht, charges) {
            return parseInt((charges / 100 * ht).toFixed(2));
        }
    };
});