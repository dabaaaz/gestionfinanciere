angular.module("starter", [ "ionic", "starter.controllers", "starter.services" ]).directive("fadeBar", function($timeout) {
    return {
        restrict: "E",
        template: '<div class="fade-bar"></div>',
        replace: true,
        link: function($scope, $element, $attr) {
            $timeout(function() {
                $scope.$watch("sideMenuController.getOpenRatio()", function(ratio) {
                    $element[0].style.opacity = Math.abs(ratio);
                });
            });
        }
    };
}).directive("onValidSubmit", [ "$parse", "$timeout", function($parse, $timeout) {
    return {
        require: "^form",
        restrict: "A",
        link: function(scope, element, attrs, form) {
            form.$submitted = false;
            var fn = $parse(attrs.onValidSubmit);
            element.on("submit", function(event) {
                scope.$apply(function() {
                    element.addClass("ng-submitted");
                    form.$submitted = true;
                    if (form.$valid) {
                        if (typeof fn === "function") {
                            fn(scope, {
                                $event: event
                            });
                        }
                    }
                });
            });
        }
    };
} ]).directive("validated", [ "$parse", function($parse) {
    return {
        require: "^form",
        restrict: "AEC",
        link: function(scope, element, attrs, form) {
            var inputs = element.find("*");
            var processInput = function(input) {
                var attributes = input.attributes;
                if (attributes.getNamedItem("ng-model") != void 0 && attributes.getNamedItem("name") != void 0) {
                    var field = form[attributes.name.value];
                    if (field != void 0) {
                        scope.$watch(function() {
                            return form.$submitted + "_" + field.$valid;
                        }, function() {
                            if (form.$submitted !== true) return;
                            var inp = angular.element(input);
                            if (inp.hasClass("ng-invalid")) {
                                element.removeClass("has-success");
                                element.addClass("has-error");
                            } else {
                                element.removeClass("has-error").addClass("has-success");
                            }
                        });
                    }
                }
            };
            for (var i = 0; i < inputs.length; i++) {
                processInput(inputs[i]);
            }
        }
    };
} ]).directive("initFromForm", function($parse) {
    return {
        link: function(scope, element, attrs) {
            var attr = attrs.initFromForm || attrs.ngModel || element.attrs("name"), val = attrs.value;
            $parse(attr).assign(scope, val);
        }
    };
}).config(function($stateProvider, $urlRouterProvider) {
    $stateProvider.state("tab", {
        url: "/tab",
        "abstract": true,
        templateUrl: "templates/tabs.html",
        controller: "HideCtrl"
    }).state("tab.dash", {
        url: "/dash",
        views: {
            "tab-dash": {
                templateUrl: "templates/tab-dash.html",
                controller: "DashCtrl"
            }
        }
    }).state("tab.factures", {
        url: "/factures",
        views: {
            "tab-factures": {
                templateUrl: "templates/tab-factures.html",
                controller: "FacturesCtrl"
            }
        }
    }).state("tab.factures-ca", {
        url: "/factures-ca",
        views: {
            "tab-factures": {
                templateUrl: "templates/tab-factures-ca.html",
                controller: "FacturesCtrl"
            }
        }
    }).state("tab.factures-tva", {
        url: "/factures-tva",
        views: {
            "tab-factures": {
                templateUrl: "templates/tab-factures-tva.html",
                controller: "FacturesCtrl"
            }
        }
    }).state("tab.factures-charges", {
        url: "/factures-charges",
        views: {
            "tab-factures": {
                templateUrl: "templates/tab-factures-charges.html",
                controller: "FacturesCtrl"
            }
        }
    }).state("tab.facture-detail", {
        url: "/facture/:factureId",
        views: {
            "tab-factures": {
                templateUrl: "templates/facture-detail.html",
                controller: "FactureDetailCtrl"
            }
        }
    }).state("tab.facture-edit", {
        url: "/facture-edit/:factureId",
        views: {
            "tab-factures": {
                templateUrl: "templates/facture-edit.html",
                controller: "FactureEditCtrl"
            }
        }
    });
    $urlRouterProvider.otherwise("/tab/dash");
});

angular.module("starter.controllers", []).controller("DashCtrl", function($scope, $timeout, $state, $ionicSideMenuDelegate, Factures, $ionicPopup) {
    $scope.toggleLeft = function() {
        $ionicSideMenuDelegate.toggleLeft();
    };
    $scope.goto = function(stateName) {
        $state.go(stateName);
    };
    var createFacture = function(name, totalFacture, tva, charges, payee, date) {
        var newFacture = Factures.newFacture($scope.factures.length, name, totalFacture, tva, charges, payee, date);
        $scope.factures.push(newFacture);
        Factures.save($scope.factures);
        $scope.selectFacture(newFacture, $scope.factures.length - 1);
        var alertPopup = $ionicPopup.alert({
            title: "Facture ajoutée",
            template: "Celle-ci apparaîtra bien dans la liste de vos factures"
        });
        alertPopup.then(function(res) {
            location.reload();
        });
    };
    $scope.factures = allFactures = Factures.all();
    var today = new Date();
    var mm = today.getMonth() + 1;
    var yyyy = today.getFullYear();
    var charges = 0, tva = 0, ca = 0, tabAverageBenefParMois = [], averageNet = 0, size = 0;
    for (var key in allFactures) {
        var facture = allFactures[key];
        var yearFacture = new Date(facture.date).getFullYear();
        var monthFacture = new Date(facture.date).getMonth() + 1;
        if (monthFacture < 10) {
            monthFacture = "0" + monthFacture;
        }
        if (yearFacture == yyyy) {
            tva = tva + facture.tva;
            charges = charges + facture.charges;
            ca = ca + parseInt(facture.totalFacture);
            if (tabAverageBenefParMois[monthFacture] === undefined) tabAverageBenefParMois[monthFacture] = 0;
            tabAverageBenefParMois[monthFacture] = tabAverageBenefParMois[monthFacture] + parseInt(facture.totalFacture);
        }
    }
    for (var month in tabAverageBenefParMois) {
        averageNet = averageNet + tabAverageBenefParMois[month];
        size++;
    }
    averageNet = averageNet / size;
    $scope.chiffresThatMonth = {
        charges: charges,
        tva: tva,
        ca: ca,
        average: averageNet
    };
    $scope.activeFacture = $scope.factures[Factures.getLastActiveIndex()];
    $scope.newFacture = function(facture) {
        var payee = false, total = 0;
        if (facture.validation) payee = facture.validation;
        if (facture.ttc) {
            total = facture.totalFacture;
        } else {
            total = facture.totalFacture + facture.tva / 100 * facture.totalFacture;
        }
        createFacture(facture.name, total, facture.tva, facture.charges, payee, facture.date);
    };
    $scope.selectFacture = function(facture, index) {
        $scope.activeFacture = facture;
        Factures.setLastActiveIndex(index);
    };
}).controller("FacturesCtrl", function($scope, Factures, $state) {
    $scope.factures = Factures.all();
    $scope.goto = function(stateName) {
        $state.go(stateName);
    };
    $scope.data = {
        showDelete: false
    };
    $scope.edit = function(facture) {
        $state.go("tab.facture-edit", {
            factureId: facture.id
        });
    };
    $scope.valid = function(facture) {
        facture.payee = true;
        Factures.editIndex(facture);
    };
    $scope.onItemDelete = function(facture) {
        $scope.factures.splice($scope.factures.indexOf(facture), 1);
        Factures.removeIndex(facture.id);
    };
    $scope.updateHt = function(total, tva) {
        $scope.updateHt = "okk";
    };
}).controller("FactureDetailCtrl", function($scope, $stateParams, Factures, $ionicNavBarDelegate) {
    $scope.facture = Factures.get($stateParams.factureId);
    $scope.goBack = function() {
        $ionicNavBarDelegate.back();
    };
}).controller("FactureEditCtrl", function($scope, $stateParams, Factures, $ionicNavBarDelegate) {
    $scope.facture = Factures.get($stateParams.factureId);
    $scope.goBack = function() {
        $ionicNavBarDelegate.back();
    };
    $scope.editFacture = function(newFacture) {
        Factures.editIndex(newFacture);
        $ionicNavBarDelegate.back();
    };
    $scope.updatettc = function() {
        var newValTtc = parseInt($scope.facture.ht) + parseInt($scope.facture.ht) * $scope.facture.tva / 100;
        newValTtc = newValTtc.toFixed(2);
        document.getElementById("totalttc").value = newValTtc;
    };
    $scope.updateht = function() {
        var newValHt = ($scope.facture.totalFacture * (100 / ($scope.facture.tva + 100))).toFixed(2);
        document.getElementById("totalht").value = newValHt;
    };
}).controller("HideCtrl", function($scope) {
    var tabs = document.querySelectorAll("div.tabs")[0];
    tabs = angular.element(tabs);
    tabs.css("display", "none");
    $scope.$on("$destroy", function() {
        tabs.css("display", "");
    });
});

angular.module("starter.services", []).factory("Factures", function() {
    return {
        all: function() {
            var factureString = window.localStorage.factures;
            if (factureString) {
                console.log(angular.fromJson(factureString));
                return angular.fromJson(factureString);
            }
            return [];
        },
        save: function(factures) {
            window.localStorage.factures = angular.toJson(factures);
        },
        newFacture: function(id, name, totalFacture, tva, charges, payee, date) {
            return {
                id: id,
                name: name,
                totalFacture: totalFacture,
                tva: tva,
                charges: charges,
                payee: payee,
                date: date
            };
        },
        get: function(factureId) {
            var factures = this.all();
            for (var key in factures) {
                var facture = factures[key];
                if (facture.id == factureId) {
                    return facture;
                }
            }
        },
        getLastActiveIndex: function() {
            return parseInt(window.localStorage.lastActiveFactures) || 0;
        },
        setLastActiveIndex: function(index) {
            window.localStorage.lastActiveFactures = index;
        },
        editIndex: function(newFacture) {
            var factures = this.all();
            for (var key in factures) {
                var facture = factures[key];
                if (facture.id == newFacture.id) {
                    factures[key] = newFacture;
                    break;
                }
            }
            this.save(factures);
        },
        removeIndex: function(index) {
            var factures = this.all();
            for (var key in factures) {
                var facture = factures[key];
                if (facture.id == index) {
                    factures.splice(key, 1);
                    break;
                }
            }
            this.save(factures);
        },
        clearAll: function() {
            window.localStorage.clear();
        }
    };
});